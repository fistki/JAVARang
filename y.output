Terminals unused in grammar

   DEF


Grammar

    0 $accept: program $end

    1 $@1: /* empty */

    2 program: ID $@1 MK_SEMICOLON program_body END ID

    3 $@2: /* empty */

    4 program_body: opt_decl_list opt_func_decl_list $@2 compound_stmt

    5 opt_decl_list: decl_list
    6              | /* empty */

    7 decl_list: decl_list decl
    8          | decl

    9 decl: VAR id_list MK_COLON scalar_type MK_SEMICOLON
   10     | VAR id_list MK_COLON array_type MK_SEMICOLON
   11     | VAR id_list MK_COLON literal_const MK_SEMICOLON

   12 literal_const: INT_CONST
   13              | OP_SUB INT_CONST
   14              | FLOAT_CONST
   15              | OP_SUB FLOAT_CONST
   16              | SCIENTIFIC
   17              | OP_SUB SCIENTIFIC
   18              | STR_CONST
   19              | TRUE
   20              | FALSE

   21 opt_func_decl_list: func_decl_list
   22                   | /* empty */

   23 func_decl_list: func_decl_list func_decl
   24               | func_decl

   25 $@3: /* empty */

   26 $@4: /* empty */

   27 func_decl: ID MK_LPAREN opt_param_list $@3 MK_RPAREN ret_type $@4 MK_SEMICOLON compound_stmt END ID

   28 opt_param_list: param_list
   29               | /* empty */

   30 param_list: param_list MK_SEMICOLON param
   31           | param

   32 param: id_list MK_COLON type

   33 id_list: id_list MK_COMMA ID
   34        | ID

   35 ret_type: MK_COLON scalar_type
   36         | /* empty */

   37 type: scalar_type
   38     | array_type

   39 scalar_type: INTEGER
   40            | REAL
   41            | BOOLEAN
   42            | STRING

   43 array_type: ARRAY array_index TO array_index OF type

   44 array_index: INT_CONST
   45            | OP_SUB INT_CONST

   46 stmt: compound_stmt
   47     | simple_stmt
   48     | cond_stmt
   49     | while_stmt
   50     | return_stmt
   51     | proc_call_stmt

   52 $@5: /* empty */

   53 compound_stmt: $@5 BEG opt_decl_list opt_stmt_list END

   54 opt_stmt_list: stmt_list
   55              | /* empty */

   56 stmt_list: stmt_list stmt
   57          | stmt

   58 simple_stmt: var_ref OP_ASSIGN boolean_expr MK_SEMICOLON
   59            | PRINT boolean_expr MK_SEMICOLON
   60            | READ boolean_expr MK_SEMICOLON

   61 proc_call_stmt: ID MK_LPAREN opt_boolean_expr_list MK_RPAREN MK_SEMICOLON

   62 $@6: /* empty */

   63 cond_stmt: IF condition THEN opt_stmt_list ELSE $@6 opt_stmt_list END IF
   64          | IF condition THEN opt_stmt_list END IF

   65 condition: boolean_expr

   66 $@7: /* empty */

   67 while_stmt: WHILE condition_while DO opt_stmt_list $@7 END DO

   68 condition_while: boolean_expr

   69 return_stmt: RETURN boolean_expr MK_SEMICOLON

   70 opt_boolean_expr_list: boolean_expr_list
   71                      | /* empty */

   72 boolean_expr_list: boolean_expr_list MK_COMMA boolean_expr
   73                  | boolean_expr

   74 boolean_expr: boolean_expr OP_OR boolean_term
   75             | boolean_term

   76 boolean_term: boolean_term OP_AND boolean_factor
   77             | boolean_factor

   78 boolean_factor: OP_NOT boolean_factor
   79               | relop_expr

   80 relop_expr: expr rel_op expr
   81           | expr

   82 rel_op: OP_LT
   83       | OP_LE
   84       | OP_EQ
   85       | OP_GE
   86       | OP_GT
   87       | OP_NE

   88 expr: expr add_op term
   89     | term

   90 add_op: OP_ADD
   91       | OP_SUB

   92 term: term mul_op factor
   93     | factor

   94 mul_op: OP_MUL
   95       | OP_DIV
   96       | OP_MOD

   97 factor: var_ref
   98       | OP_SUB var_ref
   99       | MK_LPAREN boolean_expr MK_RPAREN
  100       | OP_SUB MK_LPAREN boolean_expr MK_RPAREN
  101       | ID MK_LPAREN opt_boolean_expr_list MK_RPAREN
  102       | OP_SUB ID MK_LPAREN opt_boolean_expr_list MK_RPAREN
  103       | literal_const

  104 var_ref: ID
  105        | var_ref dim

  106 dim: MK_LB boolean_expr MK_RB


Terminals, with rules where they appear

$end (0) 0
error (256)
ARRAY (258) 43
BEG (259) 53
BOOLEAN (260) 41
DEF (261)
DO (262) 67
ELSE (263) 63
END (264) 2 27 53 63 64 67
FALSE (265) 20
INTEGER (266) 39
IF (267) 63 64
OF (268) 43
PRINT (269) 59
READ (270) 60
REAL (271) 40
RETURN (272) 69
STRING (273) 42
THEN (274) 63 64
TO (275) 43
TRUE (276) 19
VAR (277) 9 10 11
WHILE (278) 67
OP_ADD (279) 90
OP_SUB (280) 13 15 17 45 91 98 100 102
OP_MUL (281) 94
OP_DIV (282) 95
OP_MOD (283) 96
OP_ASSIGN (284) 58
OP_EQ (285) 84
OP_NE (286) 87
OP_GT (287) 86
OP_LT (288) 82
OP_GE (289) 85
OP_LE (290) 83
OP_AND (291) 76
OP_OR (292) 74
OP_NOT (293) 78
MK_COMMA (294) 33 72
MK_COLON (295) 9 10 11 32 35
MK_SEMICOLON (296) 2 9 10 11 27 30 58 59 60 61 69
MK_LPAREN (297) 27 61 99 100 101 102
MK_RPAREN (298) 27 61 99 100 101 102
MK_LB (299) 106
MK_RB (300) 106
ID (301) 2 27 33 34 61 101 102 104
INT_CONST (302) 12 13 44 45
FLOAT_CONST (303) 14 15
SCIENTIFIC (304) 16 17
STR_CONST (305) 18


Nonterminals, with rules where they appear

$accept (51)
    on left: 0
program (52)
    on left: 2, on right: 0
$@1 (53)
    on left: 1, on right: 2
program_body (54)
    on left: 4, on right: 2
$@2 (55)
    on left: 3, on right: 4
opt_decl_list (56)
    on left: 5 6, on right: 4 53
decl_list (57)
    on left: 7 8, on right: 5 7
decl (58)
    on left: 9 10 11, on right: 7 8
literal_const (59)
    on left: 12 13 14 15 16 17 18 19 20, on right: 11 103
opt_func_decl_list (60)
    on left: 21 22, on right: 4
func_decl_list (61)
    on left: 23 24, on right: 21 23
func_decl (62)
    on left: 27, on right: 23 24
$@3 (63)
    on left: 25, on right: 27
$@4 (64)
    on left: 26, on right: 27
opt_param_list (65)
    on left: 28 29, on right: 27
param_list (66)
    on left: 30 31, on right: 28 30
param (67)
    on left: 32, on right: 30 31
id_list (68)
    on left: 33 34, on right: 9 10 11 32 33
ret_type (69)
    on left: 35 36, on right: 27
type (70)
    on left: 37 38, on right: 32 43
scalar_type (71)
    on left: 39 40 41 42, on right: 9 35 37
array_type (72)
    on left: 43, on right: 10 38
array_index (73)
    on left: 44 45, on right: 43
stmt (74)
    on left: 46 47 48 49 50 51, on right: 56 57
compound_stmt (75)
    on left: 53, on right: 4 27 46
$@5 (76)
    on left: 52, on right: 53
opt_stmt_list (77)
    on left: 54 55, on right: 53 63 64 67
stmt_list (78)
    on left: 56 57, on right: 54 56
simple_stmt (79)
    on left: 58 59 60, on right: 47
proc_call_stmt (80)
    on left: 61, on right: 51
cond_stmt (81)
    on left: 63 64, on right: 48
$@6 (82)
    on left: 62, on right: 63
condition (83)
    on left: 65, on right: 63 64
while_stmt (84)
    on left: 67, on right: 49
$@7 (85)
    on left: 66, on right: 67
condition_while (86)
    on left: 68, on right: 67
return_stmt (87)
    on left: 69, on right: 50
opt_boolean_expr_list (88)
    on left: 70 71, on right: 61 101 102
boolean_expr_list (89)
    on left: 72 73, on right: 70 72
boolean_expr (90)
    on left: 74 75, on right: 58 59 60 65 68 69 72 73 74 99 100 106
boolean_term (91)
    on left: 76 77, on right: 74 75 76
boolean_factor (92)
    on left: 78 79, on right: 76 77 78
relop_expr (93)
    on left: 80 81, on right: 79
rel_op (94)
    on left: 82 83 84 85 86 87, on right: 80
expr (95)
    on left: 88 89, on right: 80 81 88
add_op (96)
    on left: 90 91, on right: 88
term (97)
    on left: 92 93, on right: 88 89 92
mul_op (98)
    on left: 94 95 96, on right: 92
factor (99)
    on left: 97 98 99 100 101 102 103, on right: 92 93
var_ref (100)
    on left: 104 105, on right: 58 97 98 105
dim (101)
    on left: 106, on right: 105


state 0

    0 $accept: . program $end

    ID  shift, and go to state 1

    program  go to state 2


state 1

    2 program: ID . $@1 MK_SEMICOLON program_body END ID

    $default  reduce using rule 1 ($@1)

    $@1  go to state 3


state 2

    0 $accept: program . $end

    $end  shift, and go to state 4


state 3

    2 program: ID $@1 . MK_SEMICOLON program_body END ID

    MK_SEMICOLON  shift, and go to state 5


state 4

    0 $accept: program $end .

    $default  accept


state 5

    2 program: ID $@1 MK_SEMICOLON . program_body END ID

    VAR  shift, and go to state 6

    $default  reduce using rule 6 (opt_decl_list)

    program_body   go to state 7
    opt_decl_list  go to state 8
    decl_list      go to state 9
    decl           go to state 10


state 6

    9 decl: VAR . id_list MK_COLON scalar_type MK_SEMICOLON
   10     | VAR . id_list MK_COLON array_type MK_SEMICOLON
   11     | VAR . id_list MK_COLON literal_const MK_SEMICOLON

    ID  shift, and go to state 11

    id_list  go to state 12


state 7

    2 program: ID $@1 MK_SEMICOLON program_body . END ID

    END  shift, and go to state 13


state 8

    4 program_body: opt_decl_list . opt_func_decl_list $@2 compound_stmt

    ID  shift, and go to state 14

    $default  reduce using rule 22 (opt_func_decl_list)

    opt_func_decl_list  go to state 15
    func_decl_list      go to state 16
    func_decl           go to state 17


state 9

    5 opt_decl_list: decl_list .
    7 decl_list: decl_list . decl

    VAR  shift, and go to state 6

    $default  reduce using rule 5 (opt_decl_list)

    decl  go to state 18


state 10

    8 decl_list: decl .

    $default  reduce using rule 8 (decl_list)


state 11

   34 id_list: ID .

    $default  reduce using rule 34 (id_list)


state 12

    9 decl: VAR id_list . MK_COLON scalar_type MK_SEMICOLON
   10     | VAR id_list . MK_COLON array_type MK_SEMICOLON
   11     | VAR id_list . MK_COLON literal_const MK_SEMICOLON
   33 id_list: id_list . MK_COMMA ID

    MK_COMMA  shift, and go to state 19
    MK_COLON  shift, and go to state 20


state 13

    2 program: ID $@1 MK_SEMICOLON program_body END . ID

    ID  shift, and go to state 21


state 14

   27 func_decl: ID . MK_LPAREN opt_param_list $@3 MK_RPAREN ret_type $@4 MK_SEMICOLON compound_stmt END ID

    MK_LPAREN  shift, and go to state 22


state 15

    4 program_body: opt_decl_list opt_func_decl_list . $@2 compound_stmt

    $default  reduce using rule 3 ($@2)

    $@2  go to state 23


state 16

   21 opt_func_decl_list: func_decl_list .
   23 func_decl_list: func_decl_list . func_decl

    ID  shift, and go to state 14

    $default  reduce using rule 21 (opt_func_decl_list)

    func_decl  go to state 24


state 17

   24 func_decl_list: func_decl .

    $default  reduce using rule 24 (func_decl_list)


state 18

    7 decl_list: decl_list decl .

    $default  reduce using rule 7 (decl_list)


state 19

   33 id_list: id_list MK_COMMA . ID

    ID  shift, and go to state 25


state 20

    9 decl: VAR id_list MK_COLON . scalar_type MK_SEMICOLON
   10     | VAR id_list MK_COLON . array_type MK_SEMICOLON
   11     | VAR id_list MK_COLON . literal_const MK_SEMICOLON

    ARRAY        shift, and go to state 26
    BOOLEAN      shift, and go to state 27
    FALSE        shift, and go to state 28
    INTEGER      shift, and go to state 29
    REAL         shift, and go to state 30
    STRING       shift, and go to state 31
    TRUE         shift, and go to state 32
    OP_SUB       shift, and go to state 33
    INT_CONST    shift, and go to state 34
    FLOAT_CONST  shift, and go to state 35
    SCIENTIFIC   shift, and go to state 36
    STR_CONST    shift, and go to state 37

    literal_const  go to state 38
    scalar_type    go to state 39
    array_type     go to state 40


state 21

    2 program: ID $@1 MK_SEMICOLON program_body END ID .

    $default  reduce using rule 2 (program)


state 22

   27 func_decl: ID MK_LPAREN . opt_param_list $@3 MK_RPAREN ret_type $@4 MK_SEMICOLON compound_stmt END ID

    ID  shift, and go to state 11

    $default  reduce using rule 29 (opt_param_list)

    opt_param_list  go to state 41
    param_list      go to state 42
    param           go to state 43
    id_list         go to state 44


state 23

    4 program_body: opt_decl_list opt_func_decl_list $@2 . compound_stmt

    $default  reduce using rule 52 ($@5)

    compound_stmt  go to state 45
    $@5            go to state 46


state 24

   23 func_decl_list: func_decl_list func_decl .

    $default  reduce using rule 23 (func_decl_list)


state 25

   33 id_list: id_list MK_COMMA ID .

    $default  reduce using rule 33 (id_list)


state 26

   43 array_type: ARRAY . array_index TO array_index OF type

    OP_SUB     shift, and go to state 47
    INT_CONST  shift, and go to state 48

    array_index  go to state 49


state 27

   41 scalar_type: BOOLEAN .

    $default  reduce using rule 41 (scalar_type)


state 28

   20 literal_const: FALSE .

    $default  reduce using rule 20 (literal_const)


state 29

   39 scalar_type: INTEGER .

    $default  reduce using rule 39 (scalar_type)


state 30

   40 scalar_type: REAL .

    $default  reduce using rule 40 (scalar_type)


state 31

   42 scalar_type: STRING .

    $default  reduce using rule 42 (scalar_type)


state 32

   19 literal_const: TRUE .

    $default  reduce using rule 19 (literal_const)


state 33

   13 literal_const: OP_SUB . INT_CONST
   15              | OP_SUB . FLOAT_CONST
   17              | OP_SUB . SCIENTIFIC

    INT_CONST    shift, and go to state 50
    FLOAT_CONST  shift, and go to state 51
    SCIENTIFIC   shift, and go to state 52


state 34

   12 literal_const: INT_CONST .

    $default  reduce using rule 12 (literal_const)


state 35

   14 literal_const: FLOAT_CONST .

    $default  reduce using rule 14 (literal_const)


state 36

   16 literal_const: SCIENTIFIC .

    $default  reduce using rule 16 (literal_const)


state 37

   18 literal_const: STR_CONST .

    $default  reduce using rule 18 (literal_const)


state 38

   11 decl: VAR id_list MK_COLON literal_const . MK_SEMICOLON

    MK_SEMICOLON  shift, and go to state 53


state 39

    9 decl: VAR id_list MK_COLON scalar_type . MK_SEMICOLON

    MK_SEMICOLON  shift, and go to state 54


state 40

   10 decl: VAR id_list MK_COLON array_type . MK_SEMICOLON

    MK_SEMICOLON  shift, and go to state 55


state 41

   27 func_decl: ID MK_LPAREN opt_param_list . $@3 MK_RPAREN ret_type $@4 MK_SEMICOLON compound_stmt END ID

    $default  reduce using rule 25 ($@3)

    $@3  go to state 56


state 42

   28 opt_param_list: param_list .
   30 param_list: param_list . MK_SEMICOLON param

    MK_SEMICOLON  shift, and go to state 57

    $default  reduce using rule 28 (opt_param_list)


state 43

   31 param_list: param .

    $default  reduce using rule 31 (param_list)


state 44

   32 param: id_list . MK_COLON type
   33 id_list: id_list . MK_COMMA ID

    MK_COMMA  shift, and go to state 19
    MK_COLON  shift, and go to state 58


state 45

    4 program_body: opt_decl_list opt_func_decl_list $@2 compound_stmt .

    $default  reduce using rule 4 (program_body)


state 46

   53 compound_stmt: $@5 . BEG opt_decl_list opt_stmt_list END

    BEG  shift, and go to state 59


state 47

   45 array_index: OP_SUB . INT_CONST

    INT_CONST  shift, and go to state 60


state 48

   44 array_index: INT_CONST .

    $default  reduce using rule 44 (array_index)


state 49

   43 array_type: ARRAY array_index . TO array_index OF type

    TO  shift, and go to state 61


state 50

   13 literal_const: OP_SUB INT_CONST .

    $default  reduce using rule 13 (literal_const)


state 51

   15 literal_const: OP_SUB FLOAT_CONST .

    $default  reduce using rule 15 (literal_const)


state 52

   17 literal_const: OP_SUB SCIENTIFIC .

    $default  reduce using rule 17 (literal_const)


state 53

   11 decl: VAR id_list MK_COLON literal_const MK_SEMICOLON .

    $default  reduce using rule 11 (decl)


state 54

    9 decl: VAR id_list MK_COLON scalar_type MK_SEMICOLON .

    $default  reduce using rule 9 (decl)


state 55

   10 decl: VAR id_list MK_COLON array_type MK_SEMICOLON .

    $default  reduce using rule 10 (decl)


state 56

   27 func_decl: ID MK_LPAREN opt_param_list $@3 . MK_RPAREN ret_type $@4 MK_SEMICOLON compound_stmt END ID

    MK_RPAREN  shift, and go to state 62


state 57

   30 param_list: param_list MK_SEMICOLON . param

    ID  shift, and go to state 11

    param    go to state 63
    id_list  go to state 44


state 58

   32 param: id_list MK_COLON . type

    ARRAY    shift, and go to state 26
    BOOLEAN  shift, and go to state 27
    INTEGER  shift, and go to state 29
    REAL     shift, and go to state 30
    STRING   shift, and go to state 31

    type         go to state 64
    scalar_type  go to state 65
    array_type   go to state 66


state 59

   53 compound_stmt: $@5 BEG . opt_decl_list opt_stmt_list END

    VAR  shift, and go to state 6

    $default  reduce using rule 6 (opt_decl_list)

    opt_decl_list  go to state 67
    decl_list      go to state 9
    decl           go to state 10


state 60

   45 array_index: OP_SUB INT_CONST .

    $default  reduce using rule 45 (array_index)


state 61

   43 array_type: ARRAY array_index TO . array_index OF type

    OP_SUB     shift, and go to state 47
    INT_CONST  shift, and go to state 48

    array_index  go to state 68


state 62

   27 func_decl: ID MK_LPAREN opt_param_list $@3 MK_RPAREN . ret_type $@4 MK_SEMICOLON compound_stmt END ID

    MK_COLON  shift, and go to state 69

    $default  reduce using rule 36 (ret_type)

    ret_type  go to state 70


state 63

   30 param_list: param_list MK_SEMICOLON param .

    $default  reduce using rule 30 (param_list)


state 64

   32 param: id_list MK_COLON type .

    $default  reduce using rule 32 (param)


state 65

   37 type: scalar_type .

    $default  reduce using rule 37 (type)


state 66

   38 type: array_type .

    $default  reduce using rule 38 (type)


state 67

   53 compound_stmt: $@5 BEG opt_decl_list . opt_stmt_list END

    IF      shift, and go to state 71
    PRINT   shift, and go to state 72
    READ    shift, and go to state 73
    RETURN  shift, and go to state 74
    WHILE   shift, and go to state 75
    ID      shift, and go to state 76

    END       reduce using rule 55 (opt_stmt_list)
    $default  reduce using rule 52 ($@5)

    stmt            go to state 77
    compound_stmt   go to state 78
    $@5             go to state 46
    opt_stmt_list   go to state 79
    stmt_list       go to state 80
    simple_stmt     go to state 81
    proc_call_stmt  go to state 82
    cond_stmt       go to state 83
    while_stmt      go to state 84
    return_stmt     go to state 85
    var_ref         go to state 86


state 68

   43 array_type: ARRAY array_index TO array_index . OF type

    OF  shift, and go to state 87


state 69

   35 ret_type: MK_COLON . scalar_type

    BOOLEAN  shift, and go to state 27
    INTEGER  shift, and go to state 29
    REAL     shift, and go to state 30
    STRING   shift, and go to state 31

    scalar_type  go to state 88


state 70

   27 func_decl: ID MK_LPAREN opt_param_list $@3 MK_RPAREN ret_type . $@4 MK_SEMICOLON compound_stmt END ID

    $default  reduce using rule 26 ($@4)

    $@4  go to state 89


state 71

   63 cond_stmt: IF . condition THEN opt_stmt_list ELSE $@6 opt_stmt_list END IF
   64          | IF . condition THEN opt_stmt_list END IF

    FALSE        shift, and go to state 28
    TRUE         shift, and go to state 32
    OP_SUB       shift, and go to state 90
    OP_NOT       shift, and go to state 91
    MK_LPAREN    shift, and go to state 92
    ID           shift, and go to state 93
    INT_CONST    shift, and go to state 34
    FLOAT_CONST  shift, and go to state 35
    SCIENTIFIC   shift, and go to state 36
    STR_CONST    shift, and go to state 37

    literal_const   go to state 94
    condition       go to state 95
    boolean_expr    go to state 96
    boolean_term    go to state 97
    boolean_factor  go to state 98
    relop_expr      go to state 99
    expr            go to state 100
    term            go to state 101
    factor          go to state 102
    var_ref         go to state 103


state 72

   59 simple_stmt: PRINT . boolean_expr MK_SEMICOLON

    FALSE        shift, and go to state 28
    TRUE         shift, and go to state 32
    OP_SUB       shift, and go to state 90
    OP_NOT       shift, and go to state 91
    MK_LPAREN    shift, and go to state 92
    ID           shift, and go to state 93
    INT_CONST    shift, and go to state 34
    FLOAT_CONST  shift, and go to state 35
    SCIENTIFIC   shift, and go to state 36
    STR_CONST    shift, and go to state 37

    literal_const   go to state 94
    boolean_expr    go to state 104
    boolean_term    go to state 97
    boolean_factor  go to state 98
    relop_expr      go to state 99
    expr            go to state 100
    term            go to state 101
    factor          go to state 102
    var_ref         go to state 103


state 73

   60 simple_stmt: READ . boolean_expr MK_SEMICOLON

    FALSE        shift, and go to state 28
    TRUE         shift, and go to state 32
    OP_SUB       shift, and go to state 90
    OP_NOT       shift, and go to state 91
    MK_LPAREN    shift, and go to state 92
    ID           shift, and go to state 93
    INT_CONST    shift, and go to state 34
    FLOAT_CONST  shift, and go to state 35
    SCIENTIFIC   shift, and go to state 36
    STR_CONST    shift, and go to state 37

    literal_const   go to state 94
    boolean_expr    go to state 105
    boolean_term    go to state 97
    boolean_factor  go to state 98
    relop_expr      go to state 99
    expr            go to state 100
    term            go to state 101
    factor          go to state 102
    var_ref         go to state 103


state 74

   69 return_stmt: RETURN . boolean_expr MK_SEMICOLON

    FALSE        shift, and go to state 28
    TRUE         shift, and go to state 32
    OP_SUB       shift, and go to state 90
    OP_NOT       shift, and go to state 91
    MK_LPAREN    shift, and go to state 92
    ID           shift, and go to state 93
    INT_CONST    shift, and go to state 34
    FLOAT_CONST  shift, and go to state 35
    SCIENTIFIC   shift, and go to state 36
    STR_CONST    shift, and go to state 37

    literal_const   go to state 94
    boolean_expr    go to state 106
    boolean_term    go to state 97
    boolean_factor  go to state 98
    relop_expr      go to state 99
    expr            go to state 100
    term            go to state 101
    factor          go to state 102
    var_ref         go to state 103


state 75

   67 while_stmt: WHILE . condition_while DO opt_stmt_list $@7 END DO

    FALSE        shift, and go to state 28
    TRUE         shift, and go to state 32
    OP_SUB       shift, and go to state 90
    OP_NOT       shift, and go to state 91
    MK_LPAREN    shift, and go to state 92
    ID           shift, and go to state 93
    INT_CONST    shift, and go to state 34
    FLOAT_CONST  shift, and go to state 35
    SCIENTIFIC   shift, and go to state 36
    STR_CONST    shift, and go to state 37

    literal_const    go to state 94
    condition_while  go to state 107
    boolean_expr     go to state 108
    boolean_term     go to state 97
    boolean_factor   go to state 98
    relop_expr       go to state 99
    expr             go to state 100
    term             go to state 101
    factor           go to state 102
    var_ref          go to state 103


state 76

   61 proc_call_stmt: ID . MK_LPAREN opt_boolean_expr_list MK_RPAREN MK_SEMICOLON
  104 var_ref: ID .

    MK_LPAREN  shift, and go to state 109

    $default  reduce using rule 104 (var_ref)


state 77

   57 stmt_list: stmt .

    $default  reduce using rule 57 (stmt_list)


state 78

   46 stmt: compound_stmt .

    $default  reduce using rule 46 (stmt)


state 79

   53 compound_stmt: $@5 BEG opt_decl_list opt_stmt_list . END

    END  shift, and go to state 110


state 80

   54 opt_stmt_list: stmt_list .
   56 stmt_list: stmt_list . stmt

    IF      shift, and go to state 71
    PRINT   shift, and go to state 72
    READ    shift, and go to state 73
    RETURN  shift, and go to state 74
    WHILE   shift, and go to state 75
    ID      shift, and go to state 76

    BEG       reduce using rule 52 ($@5)
    $default  reduce using rule 54 (opt_stmt_list)

    stmt            go to state 111
    compound_stmt   go to state 78
    $@5             go to state 46
    simple_stmt     go to state 81
    proc_call_stmt  go to state 82
    cond_stmt       go to state 83
    while_stmt      go to state 84
    return_stmt     go to state 85
    var_ref         go to state 86


state 81

   47 stmt: simple_stmt .

    $default  reduce using rule 47 (stmt)


state 82

   51 stmt: proc_call_stmt .

    $default  reduce using rule 51 (stmt)


state 83

   48 stmt: cond_stmt .

    $default  reduce using rule 48 (stmt)


state 84

   49 stmt: while_stmt .

    $default  reduce using rule 49 (stmt)


state 85

   50 stmt: return_stmt .

    $default  reduce using rule 50 (stmt)


state 86

   58 simple_stmt: var_ref . OP_ASSIGN boolean_expr MK_SEMICOLON
  105 var_ref: var_ref . dim

    OP_ASSIGN  shift, and go to state 112
    MK_LB      shift, and go to state 113

    dim  go to state 114


state 87

   43 array_type: ARRAY array_index TO array_index OF . type

    ARRAY    shift, and go to state 26
    BOOLEAN  shift, and go to state 27
    INTEGER  shift, and go to state 29
    REAL     shift, and go to state 30
    STRING   shift, and go to state 31

    type         go to state 115
    scalar_type  go to state 65
    array_type   go to state 66


state 88

   35 ret_type: MK_COLON scalar_type .

    $default  reduce using rule 35 (ret_type)


state 89

   27 func_decl: ID MK_LPAREN opt_param_list $@3 MK_RPAREN ret_type $@4 . MK_SEMICOLON compound_stmt END ID

    MK_SEMICOLON  shift, and go to state 116


state 90

   13 literal_const: OP_SUB . INT_CONST
   15              | OP_SUB . FLOAT_CONST
   17              | OP_SUB . SCIENTIFIC
   98 factor: OP_SUB . var_ref
  100       | OP_SUB . MK_LPAREN boolean_expr MK_RPAREN
  102       | OP_SUB . ID MK_LPAREN opt_boolean_expr_list MK_RPAREN

    MK_LPAREN    shift, and go to state 117
    ID           shift, and go to state 118
    INT_CONST    shift, and go to state 50
    FLOAT_CONST  shift, and go to state 51
    SCIENTIFIC   shift, and go to state 52

    var_ref  go to state 119


state 91

   78 boolean_factor: OP_NOT . boolean_factor

    FALSE        shift, and go to state 28
    TRUE         shift, and go to state 32
    OP_SUB       shift, and go to state 90
    OP_NOT       shift, and go to state 91
    MK_LPAREN    shift, and go to state 92
    ID           shift, and go to state 93
    INT_CONST    shift, and go to state 34
    FLOAT_CONST  shift, and go to state 35
    SCIENTIFIC   shift, and go to state 36
    STR_CONST    shift, and go to state 37

    literal_const   go to state 94
    boolean_factor  go to state 120
    relop_expr      go to state 99
    expr            go to state 100
    term            go to state 101
    factor          go to state 102
    var_ref         go to state 103


state 92

   99 factor: MK_LPAREN . boolean_expr MK_RPAREN

    FALSE        shift, and go to state 28
    TRUE         shift, and go to state 32
    OP_SUB       shift, and go to state 90
    OP_NOT       shift, and go to state 91
    MK_LPAREN    shift, and go to state 92
    ID           shift, and go to state 93
    INT_CONST    shift, and go to state 34
    FLOAT_CONST  shift, and go to state 35
    SCIENTIFIC   shift, and go to state 36
    STR_CONST    shift, and go to state 37

    literal_const   go to state 94
    boolean_expr    go to state 121
    boolean_term    go to state 97
    boolean_factor  go to state 98
    relop_expr      go to state 99
    expr            go to state 100
    term            go to state 101
    factor          go to state 102
    var_ref         go to state 103


state 93

  101 factor: ID . MK_LPAREN opt_boolean_expr_list MK_RPAREN
  104 var_ref: ID .

    MK_LPAREN  shift, and go to state 122

    $default  reduce using rule 104 (var_ref)


state 94

  103 factor: literal_const .

    $default  reduce using rule 103 (factor)


state 95

   63 cond_stmt: IF condition . THEN opt_stmt_list ELSE $@6 opt_stmt_list END IF
   64          | IF condition . THEN opt_stmt_list END IF

    THEN  shift, and go to state 123


state 96

   65 condition: boolean_expr .
   74 boolean_expr: boolean_expr . OP_OR boolean_term

    OP_OR  shift, and go to state 124

    $default  reduce using rule 65 (condition)


state 97

   75 boolean_expr: boolean_term .
   76 boolean_term: boolean_term . OP_AND boolean_factor

    OP_AND  shift, and go to state 125

    $default  reduce using rule 75 (boolean_expr)


state 98

   77 boolean_term: boolean_factor .

    $default  reduce using rule 77 (boolean_term)


state 99

   79 boolean_factor: relop_expr .

    $default  reduce using rule 79 (boolean_factor)


state 100

   80 relop_expr: expr . rel_op expr
   81           | expr .
   88 expr: expr . add_op term

    OP_ADD  shift, and go to state 126
    OP_SUB  shift, and go to state 127
    OP_EQ   shift, and go to state 128
    OP_NE   shift, and go to state 129
    OP_GT   shift, and go to state 130
    OP_LT   shift, and go to state 131
    OP_GE   shift, and go to state 132
    OP_LE   shift, and go to state 133

    $default  reduce using rule 81 (relop_expr)

    rel_op  go to state 134
    add_op  go to state 135


state 101

   89 expr: term .
   92 term: term . mul_op factor

    OP_MUL  shift, and go to state 136
    OP_DIV  shift, and go to state 137
    OP_MOD  shift, and go to state 138

    $default  reduce using rule 89 (expr)

    mul_op  go to state 139


state 102

   93 term: factor .

    $default  reduce using rule 93 (term)


state 103

   97 factor: var_ref .
  105 var_ref: var_ref . dim

    MK_LB  shift, and go to state 113

    $default  reduce using rule 97 (factor)

    dim  go to state 114


state 104

   59 simple_stmt: PRINT boolean_expr . MK_SEMICOLON
   74 boolean_expr: boolean_expr . OP_OR boolean_term

    OP_OR         shift, and go to state 124
    MK_SEMICOLON  shift, and go to state 140


state 105

   60 simple_stmt: READ boolean_expr . MK_SEMICOLON
   74 boolean_expr: boolean_expr . OP_OR boolean_term

    OP_OR         shift, and go to state 124
    MK_SEMICOLON  shift, and go to state 141


state 106

   69 return_stmt: RETURN boolean_expr . MK_SEMICOLON
   74 boolean_expr: boolean_expr . OP_OR boolean_term

    OP_OR         shift, and go to state 124
    MK_SEMICOLON  shift, and go to state 142


state 107

   67 while_stmt: WHILE condition_while . DO opt_stmt_list $@7 END DO

    DO  shift, and go to state 143


state 108

   68 condition_while: boolean_expr .
   74 boolean_expr: boolean_expr . OP_OR boolean_term

    OP_OR  shift, and go to state 124

    $default  reduce using rule 68 (condition_while)


state 109

   61 proc_call_stmt: ID MK_LPAREN . opt_boolean_expr_list MK_RPAREN MK_SEMICOLON

    FALSE        shift, and go to state 28
    TRUE         shift, and go to state 32
    OP_SUB       shift, and go to state 90
    OP_NOT       shift, and go to state 91
    MK_LPAREN    shift, and go to state 92
    ID           shift, and go to state 93
    INT_CONST    shift, and go to state 34
    FLOAT_CONST  shift, and go to state 35
    SCIENTIFIC   shift, and go to state 36
    STR_CONST    shift, and go to state 37

    $default  reduce using rule 71 (opt_boolean_expr_list)

    literal_const          go to state 94
    opt_boolean_expr_list  go to state 144
    boolean_expr_list      go to state 145
    boolean_expr           go to state 146
    boolean_term           go to state 97
    boolean_factor         go to state 98
    relop_expr             go to state 99
    expr                   go to state 100
    term                   go to state 101
    factor                 go to state 102
    var_ref                go to state 103


state 110

   53 compound_stmt: $@5 BEG opt_decl_list opt_stmt_list END .

    $default  reduce using rule 53 (compound_stmt)


state 111

   56 stmt_list: stmt_list stmt .

    $default  reduce using rule 56 (stmt_list)


state 112

   58 simple_stmt: var_ref OP_ASSIGN . boolean_expr MK_SEMICOLON

    FALSE        shift, and go to state 28
    TRUE         shift, and go to state 32
    OP_SUB       shift, and go to state 90
    OP_NOT       shift, and go to state 91
    MK_LPAREN    shift, and go to state 92
    ID           shift, and go to state 93
    INT_CONST    shift, and go to state 34
    FLOAT_CONST  shift, and go to state 35
    SCIENTIFIC   shift, and go to state 36
    STR_CONST    shift, and go to state 37

    literal_const   go to state 94
    boolean_expr    go to state 147
    boolean_term    go to state 97
    boolean_factor  go to state 98
    relop_expr      go to state 99
    expr            go to state 100
    term            go to state 101
    factor          go to state 102
    var_ref         go to state 103


state 113

  106 dim: MK_LB . boolean_expr MK_RB

    FALSE        shift, and go to state 28
    TRUE         shift, and go to state 32
    OP_SUB       shift, and go to state 90
    OP_NOT       shift, and go to state 91
    MK_LPAREN    shift, and go to state 92
    ID           shift, and go to state 93
    INT_CONST    shift, and go to state 34
    FLOAT_CONST  shift, and go to state 35
    SCIENTIFIC   shift, and go to state 36
    STR_CONST    shift, and go to state 37

    literal_const   go to state 94
    boolean_expr    go to state 148
    boolean_term    go to state 97
    boolean_factor  go to state 98
    relop_expr      go to state 99
    expr            go to state 100
    term            go to state 101
    factor          go to state 102
    var_ref         go to state 103


state 114

  105 var_ref: var_ref dim .

    $default  reduce using rule 105 (var_ref)


state 115

   43 array_type: ARRAY array_index TO array_index OF type .

    $default  reduce using rule 43 (array_type)


state 116

   27 func_decl: ID MK_LPAREN opt_param_list $@3 MK_RPAREN ret_type $@4 MK_SEMICOLON . compound_stmt END ID

    $default  reduce using rule 52 ($@5)

    compound_stmt  go to state 149
    $@5            go to state 46


state 117

  100 factor: OP_SUB MK_LPAREN . boolean_expr MK_RPAREN

    FALSE        shift, and go to state 28
    TRUE         shift, and go to state 32
    OP_SUB       shift, and go to state 90
    OP_NOT       shift, and go to state 91
    MK_LPAREN    shift, and go to state 92
    ID           shift, and go to state 93
    INT_CONST    shift, and go to state 34
    FLOAT_CONST  shift, and go to state 35
    SCIENTIFIC   shift, and go to state 36
    STR_CONST    shift, and go to state 37

    literal_const   go to state 94
    boolean_expr    go to state 150
    boolean_term    go to state 97
    boolean_factor  go to state 98
    relop_expr      go to state 99
    expr            go to state 100
    term            go to state 101
    factor          go to state 102
    var_ref         go to state 103


state 118

  102 factor: OP_SUB ID . MK_LPAREN opt_boolean_expr_list MK_RPAREN
  104 var_ref: ID .

    MK_LPAREN  shift, and go to state 151

    $default  reduce using rule 104 (var_ref)


state 119

   98 factor: OP_SUB var_ref .
  105 var_ref: var_ref . dim

    MK_LB  shift, and go to state 113

    $default  reduce using rule 98 (factor)

    dim  go to state 114


state 120

   78 boolean_factor: OP_NOT boolean_factor .

    $default  reduce using rule 78 (boolean_factor)


state 121

   74 boolean_expr: boolean_expr . OP_OR boolean_term
   99 factor: MK_LPAREN boolean_expr . MK_RPAREN

    OP_OR      shift, and go to state 124
    MK_RPAREN  shift, and go to state 152


state 122

  101 factor: ID MK_LPAREN . opt_boolean_expr_list MK_RPAREN

    FALSE        shift, and go to state 28
    TRUE         shift, and go to state 32
    OP_SUB       shift, and go to state 90
    OP_NOT       shift, and go to state 91
    MK_LPAREN    shift, and go to state 92
    ID           shift, and go to state 93
    INT_CONST    shift, and go to state 34
    FLOAT_CONST  shift, and go to state 35
    SCIENTIFIC   shift, and go to state 36
    STR_CONST    shift, and go to state 37

    $default  reduce using rule 71 (opt_boolean_expr_list)

    literal_const          go to state 94
    opt_boolean_expr_list  go to state 153
    boolean_expr_list      go to state 145
    boolean_expr           go to state 146
    boolean_term           go to state 97
    boolean_factor         go to state 98
    relop_expr             go to state 99
    expr                   go to state 100
    term                   go to state 101
    factor                 go to state 102
    var_ref                go to state 103


state 123

   63 cond_stmt: IF condition THEN . opt_stmt_list ELSE $@6 opt_stmt_list END IF
   64          | IF condition THEN . opt_stmt_list END IF

    IF      shift, and go to state 71
    PRINT   shift, and go to state 72
    READ    shift, and go to state 73
    RETURN  shift, and go to state 74
    WHILE   shift, and go to state 75
    ID      shift, and go to state 76

    BEG       reduce using rule 52 ($@5)
    $default  reduce using rule 55 (opt_stmt_list)

    stmt            go to state 77
    compound_stmt   go to state 78
    $@5             go to state 46
    opt_stmt_list   go to state 154
    stmt_list       go to state 80
    simple_stmt     go to state 81
    proc_call_stmt  go to state 82
    cond_stmt       go to state 83
    while_stmt      go to state 84
    return_stmt     go to state 85
    var_ref         go to state 86


state 124

   74 boolean_expr: boolean_expr OP_OR . boolean_term

    FALSE        shift, and go to state 28
    TRUE         shift, and go to state 32
    OP_SUB       shift, and go to state 90
    OP_NOT       shift, and go to state 91
    MK_LPAREN    shift, and go to state 92
    ID           shift, and go to state 93
    INT_CONST    shift, and go to state 34
    FLOAT_CONST  shift, and go to state 35
    SCIENTIFIC   shift, and go to state 36
    STR_CONST    shift, and go to state 37

    literal_const   go to state 94
    boolean_term    go to state 155
    boolean_factor  go to state 98
    relop_expr      go to state 99
    expr            go to state 100
    term            go to state 101
    factor          go to state 102
    var_ref         go to state 103


state 125

   76 boolean_term: boolean_term OP_AND . boolean_factor

    FALSE        shift, and go to state 28
    TRUE         shift, and go to state 32
    OP_SUB       shift, and go to state 90
    OP_NOT       shift, and go to state 91
    MK_LPAREN    shift, and go to state 92
    ID           shift, and go to state 93
    INT_CONST    shift, and go to state 34
    FLOAT_CONST  shift, and go to state 35
    SCIENTIFIC   shift, and go to state 36
    STR_CONST    shift, and go to state 37

    literal_const   go to state 94
    boolean_factor  go to state 156
    relop_expr      go to state 99
    expr            go to state 100
    term            go to state 101
    factor          go to state 102
    var_ref         go to state 103


state 126

   90 add_op: OP_ADD .

    $default  reduce using rule 90 (add_op)


state 127

   91 add_op: OP_SUB .

    $default  reduce using rule 91 (add_op)


state 128

   84 rel_op: OP_EQ .

    $default  reduce using rule 84 (rel_op)


state 129

   87 rel_op: OP_NE .

    $default  reduce using rule 87 (rel_op)


state 130

   86 rel_op: OP_GT .

    $default  reduce using rule 86 (rel_op)


state 131

   82 rel_op: OP_LT .

    $default  reduce using rule 82 (rel_op)


state 132

   85 rel_op: OP_GE .

    $default  reduce using rule 85 (rel_op)


state 133

   83 rel_op: OP_LE .

    $default  reduce using rule 83 (rel_op)


state 134

   80 relop_expr: expr rel_op . expr

    FALSE        shift, and go to state 28
    TRUE         shift, and go to state 32
    OP_SUB       shift, and go to state 90
    MK_LPAREN    shift, and go to state 92
    ID           shift, and go to state 93
    INT_CONST    shift, and go to state 34
    FLOAT_CONST  shift, and go to state 35
    SCIENTIFIC   shift, and go to state 36
    STR_CONST    shift, and go to state 37

    literal_const  go to state 94
    expr           go to state 157
    term           go to state 101
    factor         go to state 102
    var_ref        go to state 103


state 135

   88 expr: expr add_op . term

    FALSE        shift, and go to state 28
    TRUE         shift, and go to state 32
    OP_SUB       shift, and go to state 90
    MK_LPAREN    shift, and go to state 92
    ID           shift, and go to state 93
    INT_CONST    shift, and go to state 34
    FLOAT_CONST  shift, and go to state 35
    SCIENTIFIC   shift, and go to state 36
    STR_CONST    shift, and go to state 37

    literal_const  go to state 94
    term           go to state 158
    factor         go to state 102
    var_ref        go to state 103


state 136

   94 mul_op: OP_MUL .

    $default  reduce using rule 94 (mul_op)


state 137

   95 mul_op: OP_DIV .

    $default  reduce using rule 95 (mul_op)


state 138

   96 mul_op: OP_MOD .

    $default  reduce using rule 96 (mul_op)


state 139

   92 term: term mul_op . factor

    FALSE        shift, and go to state 28
    TRUE         shift, and go to state 32
    OP_SUB       shift, and go to state 90
    MK_LPAREN    shift, and go to state 92
    ID           shift, and go to state 93
    INT_CONST    shift, and go to state 34
    FLOAT_CONST  shift, and go to state 35
    SCIENTIFIC   shift, and go to state 36
    STR_CONST    shift, and go to state 37

    literal_const  go to state 94
    factor         go to state 159
    var_ref        go to state 103


state 140

   59 simple_stmt: PRINT boolean_expr MK_SEMICOLON .

    $default  reduce using rule 59 (simple_stmt)


state 141

   60 simple_stmt: READ boolean_expr MK_SEMICOLON .

    $default  reduce using rule 60 (simple_stmt)


state 142

   69 return_stmt: RETURN boolean_expr MK_SEMICOLON .

    $default  reduce using rule 69 (return_stmt)


state 143

   67 while_stmt: WHILE condition_while DO . opt_stmt_list $@7 END DO

    IF      shift, and go to state 71
    PRINT   shift, and go to state 72
    READ    shift, and go to state 73
    RETURN  shift, and go to state 74
    WHILE   shift, and go to state 75
    ID      shift, and go to state 76

    END       reduce using rule 55 (opt_stmt_list)
    $default  reduce using rule 52 ($@5)

    stmt            go to state 77
    compound_stmt   go to state 78
    $@5             go to state 46
    opt_stmt_list   go to state 160
    stmt_list       go to state 80
    simple_stmt     go to state 81
    proc_call_stmt  go to state 82
    cond_stmt       go to state 83
    while_stmt      go to state 84
    return_stmt     go to state 85
    var_ref         go to state 86


state 144

   61 proc_call_stmt: ID MK_LPAREN opt_boolean_expr_list . MK_RPAREN MK_SEMICOLON

    MK_RPAREN  shift, and go to state 161


state 145

   70 opt_boolean_expr_list: boolean_expr_list .
   72 boolean_expr_list: boolean_expr_list . MK_COMMA boolean_expr

    MK_COMMA  shift, and go to state 162

    $default  reduce using rule 70 (opt_boolean_expr_list)


state 146

   73 boolean_expr_list: boolean_expr .
   74 boolean_expr: boolean_expr . OP_OR boolean_term

    OP_OR  shift, and go to state 124

    $default  reduce using rule 73 (boolean_expr_list)


state 147

   58 simple_stmt: var_ref OP_ASSIGN boolean_expr . MK_SEMICOLON
   74 boolean_expr: boolean_expr . OP_OR boolean_term

    OP_OR         shift, and go to state 124
    MK_SEMICOLON  shift, and go to state 163


state 148

   74 boolean_expr: boolean_expr . OP_OR boolean_term
  106 dim: MK_LB boolean_expr . MK_RB

    OP_OR  shift, and go to state 124
    MK_RB  shift, and go to state 164


state 149

   27 func_decl: ID MK_LPAREN opt_param_list $@3 MK_RPAREN ret_type $@4 MK_SEMICOLON compound_stmt . END ID

    END  shift, and go to state 165


state 150

   74 boolean_expr: boolean_expr . OP_OR boolean_term
  100 factor: OP_SUB MK_LPAREN boolean_expr . MK_RPAREN

    OP_OR      shift, and go to state 124
    MK_RPAREN  shift, and go to state 166


state 151

  102 factor: OP_SUB ID MK_LPAREN . opt_boolean_expr_list MK_RPAREN

    FALSE        shift, and go to state 28
    TRUE         shift, and go to state 32
    OP_SUB       shift, and go to state 90
    OP_NOT       shift, and go to state 91
    MK_LPAREN    shift, and go to state 92
    ID           shift, and go to state 93
    INT_CONST    shift, and go to state 34
    FLOAT_CONST  shift, and go to state 35
    SCIENTIFIC   shift, and go to state 36
    STR_CONST    shift, and go to state 37

    $default  reduce using rule 71 (opt_boolean_expr_list)

    literal_const          go to state 94
    opt_boolean_expr_list  go to state 167
    boolean_expr_list      go to state 145
    boolean_expr           go to state 146
    boolean_term           go to state 97
    boolean_factor         go to state 98
    relop_expr             go to state 99
    expr                   go to state 100
    term                   go to state 101
    factor                 go to state 102
    var_ref                go to state 103


state 152

   99 factor: MK_LPAREN boolean_expr MK_RPAREN .

    $default  reduce using rule 99 (factor)


state 153

  101 factor: ID MK_LPAREN opt_boolean_expr_list . MK_RPAREN

    MK_RPAREN  shift, and go to state 168


state 154

   63 cond_stmt: IF condition THEN opt_stmt_list . ELSE $@6 opt_stmt_list END IF
   64          | IF condition THEN opt_stmt_list . END IF

    ELSE  shift, and go to state 169
    END   shift, and go to state 170


state 155

   74 boolean_expr: boolean_expr OP_OR boolean_term .
   76 boolean_term: boolean_term . OP_AND boolean_factor

    OP_AND  shift, and go to state 125

    $default  reduce using rule 74 (boolean_expr)


state 156

   76 boolean_term: boolean_term OP_AND boolean_factor .

    $default  reduce using rule 76 (boolean_term)


state 157

   80 relop_expr: expr rel_op expr .
   88 expr: expr . add_op term

    OP_ADD  shift, and go to state 126
    OP_SUB  shift, and go to state 127

    $default  reduce using rule 80 (relop_expr)

    add_op  go to state 135


state 158

   88 expr: expr add_op term .
   92 term: term . mul_op factor

    OP_MUL  shift, and go to state 136
    OP_DIV  shift, and go to state 137
    OP_MOD  shift, and go to state 138

    $default  reduce using rule 88 (expr)

    mul_op  go to state 139


state 159

   92 term: term mul_op factor .

    $default  reduce using rule 92 (term)


state 160

   67 while_stmt: WHILE condition_while DO opt_stmt_list . $@7 END DO

    $default  reduce using rule 66 ($@7)

    $@7  go to state 171


state 161

   61 proc_call_stmt: ID MK_LPAREN opt_boolean_expr_list MK_RPAREN . MK_SEMICOLON

    MK_SEMICOLON  shift, and go to state 172


state 162

   72 boolean_expr_list: boolean_expr_list MK_COMMA . boolean_expr

    FALSE        shift, and go to state 28
    TRUE         shift, and go to state 32
    OP_SUB       shift, and go to state 90
    OP_NOT       shift, and go to state 91
    MK_LPAREN    shift, and go to state 92
    ID           shift, and go to state 93
    INT_CONST    shift, and go to state 34
    FLOAT_CONST  shift, and go to state 35
    SCIENTIFIC   shift, and go to state 36
    STR_CONST    shift, and go to state 37

    literal_const   go to state 94
    boolean_expr    go to state 173
    boolean_term    go to state 97
    boolean_factor  go to state 98
    relop_expr      go to state 99
    expr            go to state 100
    term            go to state 101
    factor          go to state 102
    var_ref         go to state 103


state 163

   58 simple_stmt: var_ref OP_ASSIGN boolean_expr MK_SEMICOLON .

    $default  reduce using rule 58 (simple_stmt)


state 164

  106 dim: MK_LB boolean_expr MK_RB .

    $default  reduce using rule 106 (dim)


state 165

   27 func_decl: ID MK_LPAREN opt_param_list $@3 MK_RPAREN ret_type $@4 MK_SEMICOLON compound_stmt END . ID

    ID  shift, and go to state 174


state 166

  100 factor: OP_SUB MK_LPAREN boolean_expr MK_RPAREN .

    $default  reduce using rule 100 (factor)


state 167

  102 factor: OP_SUB ID MK_LPAREN opt_boolean_expr_list . MK_RPAREN

    MK_RPAREN  shift, and go to state 175


state 168

  101 factor: ID MK_LPAREN opt_boolean_expr_list MK_RPAREN .

    $default  reduce using rule 101 (factor)


state 169

   63 cond_stmt: IF condition THEN opt_stmt_list ELSE . $@6 opt_stmt_list END IF

    $default  reduce using rule 62 ($@6)

    $@6  go to state 176


state 170

   64 cond_stmt: IF condition THEN opt_stmt_list END . IF

    IF  shift, and go to state 177


state 171

   67 while_stmt: WHILE condition_while DO opt_stmt_list $@7 . END DO

    END  shift, and go to state 178


state 172

   61 proc_call_stmt: ID MK_LPAREN opt_boolean_expr_list MK_RPAREN MK_SEMICOLON .

    $default  reduce using rule 61 (proc_call_stmt)


state 173

   72 boolean_expr_list: boolean_expr_list MK_COMMA boolean_expr .
   74 boolean_expr: boolean_expr . OP_OR boolean_term

    OP_OR  shift, and go to state 124

    $default  reduce using rule 72 (boolean_expr_list)


state 174

   27 func_decl: ID MK_LPAREN opt_param_list $@3 MK_RPAREN ret_type $@4 MK_SEMICOLON compound_stmt END ID .

    $default  reduce using rule 27 (func_decl)


state 175

  102 factor: OP_SUB ID MK_LPAREN opt_boolean_expr_list MK_RPAREN .

    $default  reduce using rule 102 (factor)


state 176

   63 cond_stmt: IF condition THEN opt_stmt_list ELSE $@6 . opt_stmt_list END IF

    IF      shift, and go to state 71
    PRINT   shift, and go to state 72
    READ    shift, and go to state 73
    RETURN  shift, and go to state 74
    WHILE   shift, and go to state 75
    ID      shift, and go to state 76

    END       reduce using rule 55 (opt_stmt_list)
    $default  reduce using rule 52 ($@5)

    stmt            go to state 77
    compound_stmt   go to state 78
    $@5             go to state 46
    opt_stmt_list   go to state 179
    stmt_list       go to state 80
    simple_stmt     go to state 81
    proc_call_stmt  go to state 82
    cond_stmt       go to state 83
    while_stmt      go to state 84
    return_stmt     go to state 85
    var_ref         go to state 86


state 177

   64 cond_stmt: IF condition THEN opt_stmt_list END IF .

    $default  reduce using rule 64 (cond_stmt)


state 178

   67 while_stmt: WHILE condition_while DO opt_stmt_list $@7 END . DO

    DO  shift, and go to state 180


state 179

   63 cond_stmt: IF condition THEN opt_stmt_list ELSE $@6 opt_stmt_list . END IF

    END  shift, and go to state 181


state 180

   67 while_stmt: WHILE condition_while DO opt_stmt_list $@7 END DO .

    $default  reduce using rule 67 (while_stmt)


state 181

   63 cond_stmt: IF condition THEN opt_stmt_list ELSE $@6 opt_stmt_list END . IF

    IF  shift, and go to state 182


state 182

   63 cond_stmt: IF condition THEN opt_stmt_list ELSE $@6 opt_stmt_list END IF .

    $default  reduce using rule 63 (cond_stmt)
